/*index. html*/

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="style.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Shadows+Into+Light&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
  <title>To-do list</title>
</head>

<body>

  <main class="app">
    <h1>My Todo List...</h1>
    <div class="input-header">
      <h1><span id="date"></span></h1>
      <div class="to-do-input">
        <input type="text" id="item" placeholder="Enter a task..."><button id="enter">Enter</button>
      </div>
    </div>
    <div class="to-do-list"></div>
  </main>

  <script src="script.js"></script>

</body>

</html>


/*style.css*/

*{
    padding: 0;
    margin: 0;
  }
  
  /* #5b7065, black */
  body {
    background: rgba(48, 64, 64, 1.0); 
    background: -webkit-radial-gradient(center, rgb(194, 194, 194) 0%, rgba(0, 0, 0, 1.0) 100%);
    background: -moz-radial-gradient(center, rgb(191, 195, 195) 0%, rgba(0, 0, 0, 1.0) 100%);
    background: radial-gradient(ellipse at center, rgb(195, 199, 199) 0%, rgba(0, 0, 0, 1.0) 100%);
    font-family: 'Shadows Into Light', cursive;
    min-height: 100vh;
  }
  
  button {
    height: fit-content;
    cursor: pointer;
    color: #04202c;
    background-color: #c9d1c8;
  }
  
  .app {
    width: 600px;
    margin: auto;
    padding-top: 50px;
    color: white;
  }
  
  .input-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: white;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    padding: 0px 0px 10px 0px;
  }
  
  .to-do-input input {
    width: 250px;
    font-family: inherit;
    border: none;
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
    padding: 10px;
    outline: none;
  }
  
  .to-do-input button {
    color: #5b7065;
    font-family: inherit;
    border: none;
    padding: 10px;
    border-top-right-radius: 10px;
    border-bottom-right-radius: 10px;
  }
  
  .to-do-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .to-do-list i {
    color: #c9d1c8;
    cursor: pointer;
  }
  
  .to-do-list .fa-pen-to-square {
    color: #5b7065;
  }
  
  .to-do-list button {
    padding: 8px;
    border-radius: 10px;
    cursor: pointer;
    font-family: inherit;
    border: none;
  }
  
  .item {
    display: flex;
    flex-direction: column;
    gap: 10px;
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
    padding: 8px;
    box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.5);
  }
  
  .input-controller {
    display: flex;
    gap: 10px;
  }
  
  .input-controller textarea {
    width: 100%;
    outline: none;
    border: none;
    resize: none;
    line-height: 1.4;
    color: white;
    border-radius: 10px;
    background-color: transparent;
    font-size: 1.2rem;
    font-family: inherit;
    transition: all 0.30s ease-in-out;
  }
  
  textarea:focus {
    box-shadow: 0 0 5px white;
  }
  
  .edit-controller {
    display: flex;
    gap: 5px;
  }
  
  .update-controller {
    display: none;
  }
  
  @media(max-width: 768px) {
    .app {
      width: 95%;
      text-align: center;
    }
  
    .input-header {
      flex-direction: column;
      padding-bottom: 20px;
    }
  
    .to-do-input {
      display: flex;
    }
  
    .to-do-input input {
      width: 300px;
    }
  
  }

  /*script.js*/

  const itemsArray = localStorage.getItem('items') ? JSON.parse(localStorage.getItem('items')) : [];

document.querySelector("#enter").addEventListener("click", () => {
  const item = document.querySelector("#item")
  createItem(item)
})

document.querySelector("#item").addEventListener("keypress", (e) => {
  if(e.key === "Enter"){
    const item = document.querySelector("#item")
    createItem(item)
  }
})

function displayDate(){
  let date = new Date()
  date = date.toString().split(" ")
  date = date[1] + " " + date[2] + " " + date[3] 
  document.querySelector("#date").innerHTML = date 
}

function displayItems(){
  let items = ""
  for(let i = 0; i < itemsArray.length; i++){
    items += `<div class="item">
                <div class="input-controller">
                  <textarea disabled>${itemsArray[i]}</textarea>
                  <div class="edit-controller">
                    <i class="fa-solid fa-check deleteBtn"></i>
                    <i class="fa-solid fa-pen-to-square editBtn"></i>
                  </div>
                </div>
                <div class="update-controller">
                  <button class="saveBtn">Save</button>
                  <button class="cancelBtn">Cancel</button>
                </div>
              </div>`
  }
  document.querySelector(".to-do-list").innerHTML = items
  activateDeleteListeners()
  activateEditListeners()
  activateSaveListeners()
  activateCancelListeners()
}

function activateDeleteListeners(){
  let deleteBtn = document.querySelectorAll(".deleteBtn")
  deleteBtn.forEach((dB, i) => {
    dB.addEventListener("click", () => { deleteItem(i) })
  })
}

function activateEditListeners(){
  const editBtn = document.querySelectorAll(".editBtn")
  const updateController = document.querySelectorAll(".update-controller")
  const inputs = document.querySelectorAll(".input-controller textarea")
  editBtn.forEach((eB, i) => {
    eB.addEventListener("click", () => { 
      updateController[i].style.display = "block"
      inputs[i].disabled = false })
  })
}

function activateSaveListeners(){
  const saveBtn = document.querySelectorAll(".saveBtn")
  const inputs = document.querySelectorAll(".input-controller textarea")
  saveBtn.forEach((sB, i) => {
    sB.addEventListener("click", () => {
      updateItem(inputs[i].value, i)
    })
  })
}

function activateCancelListeners(){
  const cancelBtn = document.querySelectorAll(".cancelBtn")
  const updateController = document.querySelectorAll(".update-controller")
  const inputs = document.querySelectorAll(".input-controller textarea")
  cancelBtn.forEach((cB, i) => {
    cB.addEventListener("click", () => {
      updateController[i].style.display = "none"
      inputs[i].disabled = true
      inputs[i].style.border = "none"
    })
  })
}

function createItem(item){
  itemsArray.push(item.value)
  localStorage.setItem('items', JSON.stringify(itemsArray))
  location.reload()
}

function deleteItem(i){
  itemsArray.splice(i,1)
  localStorage.setItem('items', JSON.stringify(itemsArray))
  location.reload()
}

function updateItem(text, i){
  itemsArray[i] = text
  localStorage.setItem('items', JSON.stringify(itemsArray))
  location.reload()
}

window.onload = function() {
  displayDate()
  displayItems()
};
